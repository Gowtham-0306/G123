Exceptions are broadly categorized into two types: checked exceptions and unchecked exceptions (also known as runtime exceptions).

1. Checked Exceptions:
   - Checked exceptions are checked at compile-time.
   - The compiler mandates that the prgrammer either handle the exception using a try-catch block or declare the exception to be thrown using the `throws` keyword in the method signature.
   - Checked exceptions are typically used for conditions that a well-behaved application should anticipate and recover from.
   - Examples of checked exceptions include IOException, SQLException, and ClassNotFoundException.
   - Ex;
     try {
         // Code that may throw a checked exception
     } catch (IOException e) {
         // Handle the exception
     }
     

2. Unchecked Exceptions (Runtime Exceptions):
   - Unchecked exceptions are not checked at cmpile-time.
   - Programmers are not required to handle or declare unchecked exceptions explicitly.**
   - Unchecked exceptions usually indicate programming errors or unexpected conditions that might occur during runtime.
   - Examples of unchecked exceptions include NullPointerException, ArrayIndexOutOfBoundsException, and ArithmeticException.
   - Example:
     int result = 10 / 0; // This will throw ArithmeticException
     

The main distinction between checked and unchecked exceptions lies in how the compiler enforces handling. Checked exceptions force the programmer to either handle them or declare that they might be thrown, while unchecked exceptions do not have this requirement. Unchecked exceptions are often used for scenarios that are difficult or impractical to anticipate and handle explicitly.